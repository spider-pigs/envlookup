* envlookup

[[https://travis-ci.org/spider-pigs/envlookup][https://travis-ci.org/spider-pigs/envlookup.svg?branch=master]] [[https://www.codacy.com/app/spider-pigs/envlookup?utm_source=github.com&utm_medium=referral&utm_content=spider-pigs/envlookup&utm_campaign=Badge_Grade][https://api.codacy.com/project/badge/Grade/016b19403fbd4e96b53f85ca18153146?.svg]] [[https://godoc.org/github.com/spider-pigs/envlookup][https://godoc.org/github.com/spider-pigs/envlookup?status.svg]]

Small lib to avoid boiler plate code around environment variables.

*** Install

#+BEGIN_EXAMPLE
import "github.com/spider-pigs/envlookup"
#+END_EXAMPLE

** Usage

Set some environment variables:
#+BEGIN_EXAMPLE
export JAZZ_ARTIST="John Coltrane"
export PLAYED_WITH_MILES_DAVIES=true
export NO_OF_STUDIO_ALBUMS="51"
export RECORD_LABELS="Impulse!,Atlantic,Prestige,Blue Note"
export LONGEST_RECORDED_TRACK="27m32s"
#+END_EXAMPLE

*** Get env

Get an env var value. If the value does not exist, an error will be
returned:

#+BEGIN_EXAMPLE
s, err := envlookup.String("JAZZ_ARTIST")
#+END_EXAMPLE

*** Get env or default value

Get an env var value or a default value if it does not exist:
#+BEGIN_EXAMPLE
s, err := envlookup.String("JAZZ_SAXOPHONIST", "Wayne Shorter")
#+END_EXAMPLE

*** Get mandatory env
There are must helper functions for mandatory env vars (panics if err is non-nil):
#+BEGIN_EXAMPLE
s := envlookup.MustString(envlookup.String("JAZZ_SAXOPHONIST"))
#+END_EXAMPLE

*** Get slice env

To get values as a slice (comma-separated string):
#+BEGIN_EXAMPLE
s, err := envlookup.Slice("RECORD_LABELS")
#+END_EXAMPLE

*** Get bool env

Boolean values are supported:
#+BEGIN_EXAMPLE
b, err := envlookup.Bool("PLAYED_WITH_MILES_DAVIES")
#+END_EXAMPLE

*** Get float or int env

Get float (64 bit) or int envs:
#+BEGIN_EXAMPLE
i, err := envlookup.Int("NO_OF_STUDIO_ALBUMS")
#+END_EXAMPLE

*** Get duration env

To get a duration value:
#+BEGIN_EXAMPLE
d, err := envlookup.Duration("LONGEST_RECORDED_TRACK")
#+END_EXAMPLE

*** Errors
If an env var is not set (and there is no default value set), a NotFoundError will be returned:
#+BEGIN_EXAMPLE
d, err := envlookup.Duration("LONGEST_ALBUM")
if _, ok := err.(*envlookup.NotFoundError); ok {
    log.Println(err)
    // could not find environment variable "LONGEST_ALBUM"
    ...
}
#+END_EXAMPLE

If an env var can not be parsed as the expected return type, a ParseError will be returned:
#+BEGIN_EXAMPLE
f, err := envlookup.Float64("LONGEST_RECORDED_TRACK")
if _, ok := err.(*envlookup.ParseError); ok {
    log.Println(err)
    // could not parse environment variable "LONGEST_RECORDED_TRACK": strconv.ParseFloat: parsing "27m32s": invalid syntax
    ...
}
#+END_EXAMPLE
